/**
 * 13년 엔지니어,
 *
 * 왜 DDD에 대해서 이야기를 하는가
 * DDD란 무엇인가
 * 어떻게 DDD를 적용할수있을까?
 * 코드레벨에서의 이야기
 * 마무리
 *
 *
 * 1. 왜 DDD에 대해서?
 * 제품의 복잡성에 대해서
 * Complexity (복잡도)
 * use cases
 * 고객이 예매가능 좌석을 물어보면 시스템은 알려줘야한다.
 * 직원은 고객ㅊㅇ[게 추천을 해줘야한다.
 * 예약번호를 선점하고 알려줘야한다.
 * 직원은 고객에게 번호를 알려준다.
 *
 * Communications
 *
 *
 *
 * Similarity
 *
 *
 * communication
 * 다른 언어에서오는 다름
 *
 * language
 * 프로덕트에 접근하는 다른 팀들에 관한 다름
 *
 * 이때 공통점을 만들고 충돌을 줄인다.
 *
 * DDD = 같은 언어로 함께 일할수있게 도와준다.
 *
 * similarity
 * 리덕스 vs DDD cqrs pattern
 * 상태를 변경하는 커맨드를 위한 모댈
 * 상태를 제동하는 쿼리를 위한 모델이 있따.
 *
 * 리덕스와 DDD concept는 유사하다
 * 백엔드에서 ddd를 이야기하는것에비해 프론트는 이야기가 덜되는거같다
 *
 * 2. DDD를 어떻게 도입할까? 프론트에
 * 집고가야할 개념
 * 소프트웨어를 실제 에 닮아있게 만드는거에 있다.
 *
 * 개발자, 비개발자 사이에 커뮤니케이션에 초점을 둔다.
 *
 * strategic design
 * - bounded Context :
 *
 * Ubiquitous Language : 하나의 주제로 다른 팀에과 협업할때 컨플릭트를 해결하기 위해 만듬
 * 용어사전을 만들고, 팀내 구성원들은 이를 쓸것을 노력해야한다.
 *
 * Entity
 * 유일한 식별자
 * mutable Object
 *
 * Value Object
 * Immutable
 * 이전 값을 변경하려면 새로운 것을 만들어서 바꾼다.
 * 식별자가 없다.
 *
 * aggrrgate
 * Order
 *
 *
 *
 *
 *
 *
 */
