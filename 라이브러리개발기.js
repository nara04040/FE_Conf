/**
 * 오픈소스 라이브러리 개발기
 * psd란?
 * 포토샵 라이브러리?
 * 라이브러리 개발 배경
 * 웹에서 포토샵을 뜯어봐야할때가 있다.
 * 웹툰이라는 특성때문에 포토샵을 써야할때가 있다.
 *
 * 1.서버에 업로드해서 분석, 메타데이터와 다운
 *      psd-tools라이브러리 사용가능
 *      용량이 클경우 시간이 지연이있다.
 * 2.사용자의 브라우저에서 바로 분성
 *      네트워크 로컬에서 분석하므로 호출비용이 없다.
 *      라이브러리가 없다.
 * 방식이 있다.
 *
 * PSD.js 라이브러리
 *
 * 라이브러리가 잇는데 왜 만들었어?
 *  1. 번들링 용량,
 *  2. 실행속도
 *  3. .psb형식 미지원
 *  4. 한글 미지원
 *
 *  만든후 ->
 *  용량 줄임, 7배 빠름, PSB파일 지원, 유니코드 문자 지원
 *
 * 최적화
 * 1. 병목을 찾아라
 *  이미지를 디코딩하는데 많은 시간을 소요한다.
 *  즉 이미지 디코딩 성능을 개선하자.
 * Run-Length Endocing (이미지 인코딩 방식)
 * rgba로 나눈뒤에 디코딩할때 쓴다.?
 *
 * 알고리즘개선에는 한계가있다고 판단.
 * 데이터를 바이트 단위로 조작하는 저수준 작업에는 자스가 어울리지 않는다고 생각한다.
 *
 * 웹어셈블리를 사용했다.
 * 웹 브라우저에서 고성능 작업을 위한 기술
 * 기계어에 가까운 저수준의 바이트코드를 실행
 * js보다 빠른 해동과 최적화
 *
 * 웹 어셈블리특징
 * 바이너리로 쓰여져있어서 실행하기에 알맞는 저수준의 이진코드
 * 사람이 직접 만들기 어려움.
 * 다른 언어로 만든 코드를 웹어셈블리로 바ㅇ트코드로 컴파일
 * 다양한 하드웨어와 os에서 실행 가능
 *
 * js와 독립적인 메모리 공간을 사용한다. -> 성능 손실발생
 * 실행하기 위해 js의 도움이 필요하다 -> 개발, 배포 과정이 복잡해짐.
 *
 * - 문자열 데이터를 js엔진에 바이너리로 변환해야한다.
 * - 이 변환 데이터를 webAssembly의 메모리에 복사한다.
 * webAssembly코드의 실행 방식
 * 파일 내용을 불러온다.
 * 인스턴스 생성
 *
 * 다양한 환경에서 우리 라이브러리르 쓰게 만든다.
 *
 * 번들러의 역할.
 * js파일을 하나의 js파일로 합침
 *
 * 다양한 환경에서 라이브러리를 사용하게하고싶다  -> js와 wasm을 합친다.
 *
 *
 * js <->> wasm 간 데이터 이동을 자동화 하는 라이브러리 사용
 *
 * 크롬의 js 최적화는 무시할수없다.
 * 여러 브라우저를 고려한다면 웹어셈블리가 유리
 *
 */
