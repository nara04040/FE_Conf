// ReScript같이해요!  정미량
// 소개 : 함수형의 '함' 자도 몰랐던 저는 함수형 프로그래밍과 ReScript를 처음 접했을 때 어렵게만 느껴졌습니다. 어떤 부분이 생소했는지, 달랐는지, ReScript의 안전하고 명료한 코드 작성의 매력에 어쩌다 빠지게 되었는지 얘기해 보려 합니다.

/**
 * ReScript 진입장벽이 있어서 생소한거같다.
 * 그린랩스 프론트
 * 지방거주 재택근무, 함수형 프로그래밍 입문자.   miryang.dev
 *
 * 1. 리스크립트란?
 *  2. 좋은점
 * 3. 아쉬운점
 *
 *
 * 1. 리스크립트란?
 *  2020년 탄생 읽을수있는 js컴파일러 타입언어.
 *  js와 친숙한 구문, 모든 js라이브러리를 rescript와 함께 사용가능
 *
 * 불변성을 유지하기위해 함수명을 바꿀수없다.
 *
 *
 * 1.리스크립트 특성
 * let 만 있다.  |불변변수
 * 화살표를 사용한다. | 파이프연산자
 * return이 없다 |마지막연산자는 암묵적 반환
 * import export없다. |모든 모듈은 내보내진다
 * 타입 어노테이션 없이 타입이 있다. |
 *
 * 2. 좋았던점.
 * 작은 따옴표, 큰따옴표 | 탭사이즈 등등
 * 빌드인 포매터를 논쟁할 필요가 없다.
 *
 * 좌에서 우로 , 위에서 아래로 읽는다.
 *
 * export import신경쓰지 않아도 된다.
 * 모든 .res파일은 모든 모듈은 내보내진다.
 * 인터페이스 파일을 사용하면 내보내고싶은 모듈만 지정할수잇따.
 *
 * 자동으로 프로젝트 안에서 모듈을 찾는다.
 *
 * ==  큰 장점
 * 타입추론
 * 타입 어노테이션 없이 모든 표현식의 타입을 힌들리- 민너 타입 추론 확인 가능
 * 값의 형태가 맞는 레코드 타입 선언을 찾는다. data는 person타입으로 추론된다.
 *
 * variant
 * 합타입  red,blue yellow로 표현한다.
 *
 * 배이렁ㄴ트 생성자는 추가 값을 가질 수 있다.
 *
 *데이터 현태에 따른 switch구문
 구조분해를 하고 , 각각 분해된 결과의 오른 편에 작성된 코드가 실행된다.
 * 패턴매칭
 누락된 패턴이 있는지 컴파일 시점에 검사한다.
 *  null 
 타입으로 존재하지 안흔ㄴ 값을 표현한다.
 * 리스크립트는 점진적으로 부분적 적용이 가능하며 원할한 통합이 가능하다.

* 

 3. 아쉬웠던점
. 함수를 사용하기위해서 바인딩을 해야한다.
. 커뮤니티가 작다.
. 

4. 마무리
 */

/**
 *
 */
